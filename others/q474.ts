// 474 一和零 https://leetcode-cn.com/problems/ones-and-zeroes/
// ["10","0001","111001","1","0"]
// 5
// 3


// 10  111 000 101 1111  1010

// 1 1 1 1 1    1 1 0
// 0 0 0 0

["0", "11", "1000", "01", "0", "101", "1", "1", "1", "0", "0", "0", "0", "1", "0", "0110101", "0", "11", "01", "00", "01111", "0011", "1", "1000", "0", "11101", "1", "0", "10", "0111"]
9
80

function findMaxForm(strs: string[], m: number, n: number): number {
    let totalAdd = 0;
    strs.sort((a, b) => a.length - b.length);
    for (let i = 0; i < strs.length; i++) {
        if (strs[i] === '0' && m > 0) {
            strs[i] = '';
            m--;
            totalAdd++;
        }

        if (strs[i] === '1' && n > 0) {
            strs[i] = '';
            n--;
            totalAdd++;
        }
        if (strs[i] === '01' || strs[i] === '10') {
            if (m > 0 && n > 0) {
                strs[i] = ''
                m--;
                n--;
                totalAdd++;
            }
        }
    }

    strs = strs.filter(v => v !== '');
    const l = Math.max(strs.length, m, n) + 1;
    const store: any[][][] = [];
    for (let i = 0; i < l; i++) {
        const t = [];
        for (let j = 0; j < l; j++) {
            t[j] = [];
        }
        store.push(t);
    }
    function process(length: number, a: number, b: number): number {
        if (length === 0) return 0;
        if (store[length][a][b] !== undefined) return store[length][a][b];
        const recentPk = wordStr(strs[length - 1]);
        if (a >= recentPk[0] && b >= recentPk[1]) {
            const picked = process(length - 1, a - recentPk[0], b - recentPk[1]) + 1;
            const unPicked = process(length - 1, a, b);
            store[length][a][b] = Math.max(picked, unPicked);
            return store[length][a][b];
        }
        store[length][a][b] = process(length - 1, a, b);
        return store[length][a][b];
    }

    return process(strs.length, m, n) + totalAdd;
};


function wordStr(str: string): [number, number] {
    let num0 = 0;
    let num1 = 0;
    for (const c of str) {
        if (c === '1') num1++;
        if (c === '0') num0++;
    }
    return [num0, num1];
}


console.log(findMaxForm(["111", "1000", "1000", "1000"], 9, 3)) // 3

console.log(findMaxForm(["10", "0001", "111001", "1", "0"], 5, 3)) // 4

console.log(findMaxForm(["0011", "0001", "0111"], 4, 4)) // 2

console.log(findMaxForm(["0", "1101", "01", "00111", "1", "10010", "0", "0", "00"], 63, 36)) // 9

console.log(findMaxForm(["10", "0", "1"], 1, 1)) // 2

console.log(findMaxForm(["00", "000"], 1, 10)) // 0

console.log(
    findMaxForm(["0", "11", "1000", "01", "0", "101", "1", "1", "1", "0", "0", "0", "0", "1", "0", "0110101", "0", "11", "01", "00", "01111", "0011", "1", "1000", "0", "11101", "1", "0", "10", "0111"], 9, 80)) // 17

console.log(
    findMaxForm(
        ["11", "00", "110110", "1", "111", "10", "00", "1", "10101", "0", "1010", "100", "101", "00", "0", "10010", "1", "0111", "010", "11", "1", "1", "100", "1"]
        , 22, 64)) // 17
console.log(
    findMaxForm(

        ,
        100
        ,
        100
    )) // 17


// ["0011","0001","0111"]
// 4
// 4